openapi: 3.0.3
info:
  version: 1.0.0
  title: Intermediation EU
  license:
    name: CC0 1.0 Universal
    url: https://creativecommons.org/publicdomain/zero/1.0/legalcode.sv
  description: |
    This is the API for previewing evidences to be consumed in a Swedish procedure. 
    It covers both the retrieval of the preview link to a preview space as well as the actual 
    retrieval of the evidence.
    # Authorization
    For accessing any of the endpoints the requester needs to provide an authorization header with required token.
    
    An example for how to use bearerAuth:
    ``` 
    Authorization: Bearer <jwt-token>
    ```

tags:
  - name: 'Common Services EB V1'
    description: 'Common Services Evidence Broker'
  - name: 'Common Services DSD V1'
    description: 'Common Services Data Service Directory'
  - name: 'Preview Sessions V1'
    description: 'Requests for Evidence involving review'
  - name: 'Evidences V1'
    description: 'Evidences directly without review'

servers:
  - url: 'http://localhost:9300'
    description: 'Local dev environment'
  - url: 'https://sdg-intermediation-eu-digg-sdg-build.apps.diggdev.capdigg.sgit.se'
    description: 'DEV environment'

paths:
  '/v1/common-services/eb/requirements':
    get:
      tags: [ 'Common Services EB V1' ]
      summary: requirements-by-procedure-and-jurisdiction
      externalDocs:
        url: https://ec.europa.eu/digital-building-blocks/sites/pages/viewpage.action?pageId=706382120#id-3.1.4QueryInterfaceSpecificationoftheDSD(December2023)-4.2.Query:FindDataServicesofEvidenceProvidersforaspecificEvidenceTypeClassification
      operationId: getRequirements
      parameters:
        - name: procedureId
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ProcedureId'
        - $ref: '#/components/parameters/countryParamOptional'
        - $ref: '#/components/parameters/adminL2Param'
        - $ref: '#/components/parameters/adminL3Param'
      responses:
        '200':
          description: 'Requirement'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requirements'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
        '404':
          description: Requirements not found
  '/v1/common-services/eb/evidence-types':
    get:
      tags: [ 'Common Services EB V1' ]
      summary: evidence-types-by-requirement-and-jurisdiction
      externalDocs:
        url: https://ec.europa.eu/digital-building-blocks/sites/pages/viewpage.action?pageId=706382141#id-3.2.4QueryInterfaceSpecificationoftheEB(December2023)-4.3.GetEvidenceTypesforRequirementQuery
      operationId: getEvidenceTypes
      parameters:
        - name: requirementId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/RequirementId'
        - $ref: '#/components/parameters/countryParamOptional'
        - $ref: '#/components/parameters/adminL2Param'
        - $ref: '#/components/parameters/adminL3Param'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceTypes'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
        '404':
          description: Evidence not found
  '/v1/common-services/eb/procedures':
    get:
      tags: [ 'Common Services EB V1' ]
      summary: 'Extracts procedures referenced by requirements returned by requirements-by-procedure-and-jurisdiction'
      operationId: getProcedures
      parameters:
        - $ref: '#/components/parameters/countryParamMandatory'
      responses:
        '200':
          description: 'Procedures'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Procedures'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
        '404':
          description: Procedures not found
  '/v1/common-services/dsd/data-services':
    get:
      tags: [ 'Common Services DSD V1' ]
      summary: dataservices-by-evidencetype-and-jurisdiction
      externalDocs:
        url: https://ec.europa.eu/digital-building-blocks/sites/pages/viewpage.action?pageId=706382120#id-3.1.4QueryInterfaceSpecificationoftheDSD(December2023)-4.2.Query:FindDataServicesofEvidenceProvidersforaspecificEvidenceTypeClassification
      operationId: getDataServices
      parameters:
        - name: evidenceTypeClassification
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EvidenceTypeClassification'
        - $ref: '#/components/parameters/countryParamMandatory'
        - $ref: '#/components/parameters/adminL2Param'
        - $ref: '#/components/parameters/adminL3Param'
        - name: jurisdictionContextId
          in: query
          required: false
          schema:
            type: string
        - name: evidenceTypeId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataServiceEvidenceType'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
        '404':
          description: Evidence not found
  '/v1/evidence/preview-sessions':
    post:
      tags: [ 'Preview Sessions V1' ]
      summary: Start a preview session
      operationId: startPreviewSession
      requestBody:
        $ref: '#/components/requestBodies/EvidenceRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/PreviewResponseBody'
  '/v1/evidence/preview-sessions/{conversationId}/files':
    get:
      tags: [ 'Preview Sessions V1' ]
      summary: Retrieve evidence files after preview
      operationId: retrievePreviewFiles
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ConversationId'
      responses:
        '200':
          $ref: '#/components/responses/EvidencePlainResponse'
  '/v1/evidences':
    post:
      tags: [ 'Evidences V1' ]
      summary: Request and attempt to retrieve evidence directly without preview
      operationId: requestEvidence
      requestBody:
        $ref: '#/components/requestBodies/EvidenceRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/EvidenceCreatedResponse'
        '202':
          $ref: '#/components/responses/EvidenceDeferredResponse'
  '/v1/evidences/{conversationId}':
    get:
      tags: [ 'Evidences V1' ]
      summary: Retrieve evidence previously requested directly without preview
      operationId: retrieveRequestedEvidence
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ConversationId'
      responses:
        '200':
          $ref: '#/components/responses/EvidencePlainResponse'

security:
  - oAuth2ClientCredentials: [ read ]

components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: See https://docs.swedenconnect.se/technical-framework/sdg/sdg-oauth2-profile.html
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token/
          scopes:
            read: Grant read-only access

  schemas:
    AccessService:
      type: object
      required: [ id, publisherId ]
      properties:
        id:
          $ref: '#/components/schemas/Identifier'
        publisherId:
          $ref: '#/components/schemas/Identifier'
    Address:
      type: object
      required: [ fullAddress, locatorDesignator, postCode, postCityName, adminUnitLevel1, adminUnitLevel2 ]
      properties:
        fullAddress:
          type: string
        locatorDesignator:
          type: string
        postCode:
          type: string
        postCityName:
          type: string
        thoroughfare:
          type: string
        adminUnitLevel1:
          type: string
        adminUnitLevel2:
          type: string
    ConversationId:
      type: string
      format: uuid
    Country:
      type: string
      # NOTE 'EC' is not a EU country but is returned by common services.
      enum: [ AT, BE, BG, CY, CZ, DE, DK, EE, EL, ES, FI, FR, HR, HU, IE, IT, LT, LU, LV, MT, NL, PL, PT, RO, SE, SI, SK, EC ]
    DataServiceEvidenceType:
      type: object
      required: [ identifier, evidenceTypeClassification, title, distributedAs, accessServices ]
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        evidenceTypeClassification:
          $ref: '#/components/schemas/EvidenceTypeClassification'
        title:
          $ref: '#/components/schemas/MultiLingualString'
        distributedAs:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceTypeDistributionType'
        accessServices:
          type: array
          items:
            $ref: '#/components/schemas/AccessService'
    DistributionFormat:
      type: string
      format: mime-type
    EvidenceFile:
      type: object
      properties:
        mimetype:
          type: string
        content:
          type: string
          format: byte
        filename:
          type: string
        identifier:
          type: string
        issuingAuthority:
          type: object
          properties:
            id:
              type: string
            name:
              $ref: '#/components/schemas/MultiLingualString'
        isConformantTo:
          type: object
          properties:
            evidenceTypeClassification:
              type: string
            description:
              $ref: '#/components/schemas/MultiLingualString'
            title:
              $ref: '#/components/schemas/MultiLingualString'
        issuingDate:
          type: string
          format: date
        distribution:
          type: object
          properties:
            format:
              type: string
            language:
              type: array
              items:
                type: string
            conformsTo:
              type: string
            transformation:
              type: string
        validityPeriod:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
    EvidenceFilesBody:
      type: object
      required: [ evidenceFiles ]
      properties:
        conversationId:
          $ref: '#/components/schemas/ConversationId'
        evidenceFiles:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceFile'
    EvidenceType:
      type: object
      properties:
        evidenceTypeClassification:
          $ref: '#/components/schemas/EvidenceTypeClassification'
        title:
          $ref: '#/components/schemas/MultiLingualString'
        description:
          $ref: '#/components/schemas/MultiLingualString'
        jurisdictions:
          type: array
          items:
            $ref: '#/components/schemas/JurisdictionType'
    EvidenceTypeClassification:
      type: string
      format: uri
    EvidenceTypeDistributionType:
      type: object
      required: [ format ]
      properties:
        format:
          $ref: '#/components/schemas/DistributionFormat'
        transformation:
          type: string
    EvidenceTypes:
      type: object
      properties:
        evidenceTypes:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceType'
    Gender:
      type: string
      enum:
        - MALE
        - FEMALE
        - UNSPECIFIED
    Identifier:
      type: object
      required: [ value ]
      properties:
        schemeId:
          type: string
        value:
          type: string
    JurisdictionAdminL2:
      type: string
      minLength: 3
      maxLength: 5
      description: The level two administration code for a specific jurisdiction context expressed using 3 to 5 letter NUTS code.
      example: AT
      externalDocs:
        url: https://code.europa.eu/oots/tdd/tdd_chapters/-/blob/master/OOTS-EDM/codelists/External/NutsCodes.gc
    JurisdictionAdminL3:
      type: string
      description: The level three administration code for a specific jurisdiction context expressed using LAU Code.
      example: 21001
      externalDocs:
        url: https://code.europa.eu/oots/tdd/tdd_chapters/-/blob/master/OOTS-EDM/codelists/OOTS/LAU2022-CodeList.gc
    JurisdictionType:
      properties:
        AdminUnitLevel1:
          $ref: '#/components/schemas/Country'
        AdminUnitLevel2:
          $ref: '#/components/schemas/JurisdictionAdminL2'
        AdminUnitLevel3:
          $ref: '#/components/schemas/JurisdictionAdminL3'
    MultiLingualString:
      description: 'String in various languages'
      type: object
      additionalProperties:
        type: string
      example:
        en: Something in English.
        de: Etwas auf Deutsch.
    Person:
      type: object
      required: [ familyName, givenName, dateOfBirth ]
      properties:
        levelOfAssurance:
          type: string
        identifier:
          type: string
        familyName:
          type: string
        givenName:
          type: string
        dateOfBirth:
          type: string
          format: date
        birthName:
          type: string
        placeOfBirth:
          type: string
        currentAddress:
          $ref: '#/components/schemas/Address'
        gender:
          $ref: '#/components/schemas/Gender'
    Procedure:
      required: [ identifier ]
      properties:
        identifier:
          type: string
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
    ProcedureId:
      type: string
      example: 'R1'
      externalDocs:
        url: https://code.europa.eu/oots/tdd/tdd_chapters/-/blob/master/OOTS-EDM/codelists/OOTS/Procedures-CodeList.gc
    Procedures:
      type: object
      properties:
        procedure:
          type: array
          items:
            $ref: '#/components/schemas/Procedure'
    ReferenceFramework:
      type: object
      required: [ identifier ]
      properties:
        identifier:
          $ref: '#/components/schemas/Identifier'
        title:
          $ref: '#/components/schemas/MultiLingualString'
        description:
          $ref: '#/components/schemas/MultiLingualString'
        relatedTo:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceFramework'
    RequesterAgent:
      type: object
      required: [ organisationNumber, name ]
      properties:
        organisationNumber:
          $ref: '#/components/schemas/SwedishOrgNr'
        name:
          $ref: '#/components/schemas/MultiLingualString'
        address:
          $ref: '#/components/schemas/Address'
    Requirement:
      type: object
      required: [ id, name, country ]
      properties:
        id:
          $ref: '#/components/schemas/RequirementId'
        name:
          $ref: '#/components/schemas/MultiLingualString'
        countries:
          type: array
          items:
            $ref: '#/components/schemas/Country'
        referenceFramework:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceFramework'
    RequirementId:
      description: Describing the needs of the procedure with regard to the evidence request or a particular piece of information
      type: string
      format: uri
    Requirements:
      type: object
      properties:
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'
    SwedishOrgNr:
      type: string
      pattern: '\d{6}-\d{4}'

  parameters:
    countryParamMandatory:
      name: countryCode
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/Country'
    countryParamOptional:
      name: countryCode
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/Country'
    adminL2Param:
      name: jurisdictionAdminL2
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/JurisdictionAdminL2'
    adminL3Param:
      name: jurisdictionAdminL3
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/JurisdictionAdminL3'

  requestBodies:
    EvidenceRequestBody:
      required: true
      content:
        application/json:
          schema:
            title: 'EvidenceRequestBody'
            type: object
            required: [ evidenceTypeClassification, distributedAs, countryCode, requirementId, requesterAgent, person ]
            properties:
              evidenceTypeClassification:
                $ref: '#/components/schemas/EvidenceTypeClassification'
              distributedAs:
                $ref: '#/components/schemas/DistributionFormat'
              countryCode:
                $ref: '#/components/schemas/Country'
              procedureId:
                $ref: '#/components/schemas/ProcedureId'
              requirementId:
                $ref: '#/components/schemas/RequirementId'
              requesterAgent:
                $ref: '#/components/schemas/RequesterAgent'
              providerAgentId:
                type: string
              person:
                $ref: '#/components/schemas/Person'

  responses:
    PreviewResponseBody:
      description: 'Evidence preview details'
      content:
        application/json:
          schema:
            title: 'PreviewResponseBody'
            type: object
            required: [ conversationId, name, url ]
            properties:
              conversationId:
                $ref: '#/components/schemas/ConversationId'
              description:
                $ref: '#/components/schemas/MultiLingualString'
              url:
                description: 'Location of preview resource'
                type: string
                format: uri
    EvidencePlainResponse:
      description: 'Requested evidence body only'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EvidenceFilesBody'
    EvidenceCreatedResponse:
      description: 'Requested evidence body and location'
      headers:
        Location:
          description: 'Location of returned evidence (same as in body)'
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EvidenceFilesBody'
    EvidenceDeferredResponse:
      description: 'Empty body and future location of requested evidence'
      headers:
        Location:
          description: 'Future location of requested evidence available after this response was returned'
          schema:
            type: string
            format: uri
      content: { }
    UnauthorizedError:
      description: Access token is missing or invalid
